/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, Input } from '@angular/core';
import { merge, partition, timer } from 'rxjs';
import { debounce, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { Spinkit } from '../spinkits';
import * as i0 from "@angular/core";
import * as i1 from "../services/pending-requests-interceptor.service";
import * as i2 from "../services/spinner-visibility.service";
import * as i3 from "./sk-cube-grid/sk-cube-grid.component";
import * as i4 from "./sk-chasing-dots/sk-chasing-dots.component";
import * as i5 from "./sk-double-bounce/sk-double-bounce.component";
import * as i6 from "./sk-rotating-plane/sk-rotating-plane.component";
import * as i7 from "./sk-spinner-pulse/sk-spinner-pulse.component";
import * as i8 from "./sk-three-bounce/sk-three-bounce.component";
import * as i9 from "./sk-wandering-cubes/sk-wandering-cubes.component";
import * as i10 from "./sk-wave/sk-wave.component";
import * as i11 from "@angular/common";
export class NgHttpLoaderComponent {
    constructor(pendingRequestsInterceptor, spinnerVisibility) {
        this.pendingRequestsInterceptor = pendingRequestsInterceptor;
        this.spinnerVisibility = spinnerVisibility;
        this.spinkit = Spinkit;
        this.visibleUntil = Date.now();
        this.backdrop = true;
        this.debounceDelay = 0;
        this.entryComponent = null;
        this.extraDuration = 0;
        this.filteredHeaders = [];
        this.filteredMethods = [];
        this.filteredUrlPatterns = [];
        this.minDuration = 0;
        this.opacity = '.7';
        this.backdropBackgroundColor = '#f1f1f1';
        this.spinner = Spinkit.skWave;
    }
    ngOnInit() {
        this.initIsvisibleObservable();
        this.nullifySpinnerIfEntryComponentIsDefined();
        this.initFilters();
    }
    initIsvisibleObservable() {
        const [showSpinner$, hideSpinner$] = partition(this.pendingRequestsInterceptor.pendingRequestsStatus$, h => h);
        this.isVisible$ = merge(this.pendingRequestsInterceptor.pendingRequestsStatus$
            .pipe(switchMap(() => showSpinner$.pipe(debounce(() => timer(this.debounceDelay))))), showSpinner$
            .pipe(switchMap(() => hideSpinner$.pipe(debounce(() => this.getVisibilityTimer$())))), this.spinnerVisibility.visibility$).pipe(distinctUntilChanged(), tap(h => this.updateExpirationDelay(h)));
    }
    nullifySpinnerIfEntryComponentIsDefined() {
        if (this.entryComponent) {
            this.spinner = null;
        }
    }
    initFilters() {
        this.initFilteredUrlPatterns();
        this.initFilteredMethods();
        this.initFilteredHeaders();
    }
    initFilteredUrlPatterns() {
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(e => this.pendingRequestsInterceptor.filteredUrlPatterns.push(new RegExp(e)));
        }
    }
    initFilteredMethods() {
        this.pendingRequestsInterceptor.filteredMethods = this.filteredMethods;
    }
    initFilteredHeaders() {
        this.pendingRequestsInterceptor.filteredHeaders = this.filteredHeaders;
    }
    updateExpirationDelay(showSpinner) {
        if (showSpinner) {
            this.visibleUntil = Date.now() + this.minDuration;
        }
    }
    getVisibilityTimer$() {
        return timer(Math.max(this.extraDuration, this.visibleUntil - Date.now()));
    }
}
NgHttpLoaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: NgHttpLoaderComponent, deps: [{ token: i1.PendingRequestsInterceptor }, { token: i2.SpinnerVisibilityService }], target: i0.ɵɵFactoryTarget.Component });
NgHttpLoaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.0", type: NgHttpLoaderComponent, selector: "ng-http-loader", inputs: { backdrop: "backdrop", backgroundColor: "backgroundColor", debounceDelay: "debounceDelay", entryComponent: "entryComponent", extraDuration: "extraDuration", filteredHeaders: "filteredHeaders", filteredMethods: "filteredMethods", filteredUrlPatterns: "filteredUrlPatterns", minDuration: "minDuration", opacity: "opacity", backdropBackgroundColor: "backdropBackgroundColor", spinner: "spinner" }, ngImport: i0, template: "<div id=\"spinner\"\n     *ngIf=\"isVisible$ | async\"\n     [class.backdrop]=\"backdrop\"\n     [style.opacity]=\"opacity\"\n     [ngStyle]=\"{'background-color': backdrop ? backdropBackgroundColor : 'transparent'}\">\n\n    <ng-container *ngComponentOutlet=\"entryComponent\"></ng-container>\n\n    <sk-cube-grid\n        *ngIf=\"spinner === spinkit.skCubeGrid\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-cube-grid>\n\n    <sk-chasing-dots\n        *ngIf=\"spinner === spinkit.skChasingDots\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-chasing-dots>\n\n    <sk-double-bounce\n        *ngIf=\"spinner === spinkit.skDoubleBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-double-bounce>\n\n    <sk-rotating-plane\n        *ngIf=\"spinner === spinkit.skRotatingPlane\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-rotating-plane>\n\n    <sk-spinner-pulse\n        *ngIf=\"spinner === spinkit.skSpinnerPulse\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-spinner-pulse>\n\n    <sk-three-bounce\n        *ngIf=\"spinner === spinkit.skThreeBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-three-bounce>\n\n    <sk-wandering-cubes\n        *ngIf=\"spinner === spinkit.skWanderingCubes\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wandering-cubes>\n\n    <sk-wave\n        *ngIf=\"spinner === spinkit.skWave\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wave>\n\n</div>\n\n", styles: ["#spinner{top:50%;left:50%;transform:translate(-50%,-50%);position:fixed;z-index:9999}#spinner.backdrop{top:0;left:0;height:100%;width:100%;display:flex;align-items:center;justify-content:center;transform:none}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}"], components: [{ type: i3.SkCubeGridComponent, selector: "sk-cube-grid" }, { type: i4.SkChasingDotsComponent, selector: "sk-chasing-dots" }, { type: i5.SkDoubleBounceComponent, selector: "sk-double-bounce" }, { type: i6.SkRotatingPlaneComponent, selector: "sk-rotating-plane" }, { type: i7.SkSpinnerPulseComponent, selector: "sk-spinner-pulse" }, { type: i8.SkThreeBounceComponent, selector: "sk-three-bounce" }, { type: i9.SkWanderingCubesComponent, selector: "sk-wandering-cubes" }, { type: i10.SkWaveComponent, selector: "sk-wave" }], directives: [{ type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i11.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModuleFactory"] }], pipes: { "async": i11.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: NgHttpLoaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ng-http-loader',
                    templateUrl: './ng-http-loader.component.html',
                    styleUrls: ['./ng-http-loader.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.PendingRequestsInterceptor }, { type: i2.SpinnerVisibilityService }]; }, propDecorators: { backdrop: [{
                type: Input
            }], backgroundColor: [{
                type: Input
            }], debounceDelay: [{
                type: Input
            }], entryComponent: [{
                type: Input
            }], extraDuration: [{
                type: Input
            }], filteredHeaders: [{
                type: Input
            }], filteredMethods: [{
                type: Input
            }], filteredUrlPatterns: [{
                type: Input
            }], minDuration: [{
                type: Input
            }], opacity: [{
                type: Input
            }], backdropBackgroundColor: [{
                type: Input
            }], spinner: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,