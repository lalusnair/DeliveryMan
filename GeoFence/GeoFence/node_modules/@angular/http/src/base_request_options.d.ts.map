{"version":3,"file":"base_request_options.d.ts","sources":["base_request_options.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { RequestMethod, ResponseContentType } from './enums';\r\nimport { Headers } from './headers';\r\nimport { RequestOptionsArgs } from './interfaces';\r\nimport { URLSearchParams } from './url_search_params';\r\n/**\r\n * Creates a request options object to be optionally provided when instantiating a\r\n * {@link Request}.\r\n *\r\n * This class is based on the `RequestInit` description in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\r\n *\r\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\r\n * class, which sub-classes `RequestOptions`.\r\n *\r\n * ```typescript\r\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\r\n *\r\n * const options = new RequestOptions({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * });\r\n * const req = new Request(options);\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // https://google.com\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nexport declare class RequestOptions {\r\n    /**\r\n     * Http method with which to execute a {@link Request}.\r\n     * Acceptable methods are defined in the {@link RequestMethod} enum.\r\n     */\r\n    method: RequestMethod | string | null;\r\n    /**\r\n     * {@link Headers} to be attached to a {@link Request}.\r\n     */\r\n    headers: Headers | null;\r\n    /**\r\n     * Body to be used when creating a {@link Request}.\r\n     */\r\n    body: any;\r\n    /**\r\n     * Url with which to perform a {@link Request}.\r\n     */\r\n    url: string | null;\r\n    /**\r\n     * Search parameters to be included in a {@link Request}.\r\n     */\r\n    params: URLSearchParams;\r\n    /**\r\n     * @deprecated from 4.0.0. Use params instead.\r\n     */\r\n    /**\r\n    * @deprecated from 4.0.0. Use params instead.\r\n    */\r\n    search: URLSearchParams;\r\n    /**\r\n     * Enable use credentials for a {@link Request}.\r\n     */\r\n    withCredentials: boolean | null;\r\n    responseType: ResponseContentType | null;\r\n    constructor(opts?: RequestOptionsArgs);\r\n    /**\r\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\r\n     * existing values. This method will not change the values of the instance on which it is being\r\n     * called.\r\n     *\r\n     * Note that `headers` and `search` will override existing values completely if present in\r\n     * the `options` object. If these values should be merged, it should be done prior to calling\r\n     * `merge` on the `RequestOptions` instance.\r\n     *\r\n     * ```typescript\r\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\r\n     *\r\n     * const options = new RequestOptions({\r\n     *   method: RequestMethod.Post\r\n     * });\r\n     * const req = new Request(options.merge({\r\n     *   url: 'https://google.com'\r\n     * }));\r\n     * console.log('req.method:', RequestMethod[req.method]); // Post\r\n     * console.log('options.url:', options.url); // null\r\n     * console.log('req.url:', req.url); // https://google.com\r\n     * ```\r\n     */\r\n    merge(options?: RequestOptionsArgs): RequestOptions;\r\n    private _mergeSearchParams;\r\n    private _parseParams;\r\n    private _appendParam;\r\n}\r\n/**\r\n * Subclass of {@link RequestOptions}, with default values.\r\n *\r\n * Default values:\r\n *  * method: {@link RequestMethod RequestMethod.Get}\r\n *  * headers: empty {@link Headers} object\r\n *\r\n * This class could be extended and bound to the {@link RequestOptions} class\r\n * when configuring an {@link Injector}, in order to override the default options\r\n * used by {@link Http} to create and send {@link Request Requests}.\r\n *\r\n * ```typescript\r\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\r\n *\r\n * class MyOptions extends BaseRequestOptions {\r\n *   search: string = 'coreTeam=true';\r\n * }\r\n *\r\n * {provide: RequestOptions, useClass: MyOptions};\r\n * ```\r\n *\r\n * The options could also be extended when manually creating a {@link Request}\r\n * object.\r\n *\r\n * ```\r\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\r\n *\r\n * const options = new BaseRequestOptions();\r\n * const req = new Request(options.merge({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * }));\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // null\r\n * console.log('req.url:', req.url); // https://google.com\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nexport declare class BaseRequestOptions extends RequestOptions {\r\n    constructor();\r\n}\r\n"]}