{"version":3,"file":"xhr_backend.d.ts","sources":["xhr_backend.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Observable } from 'rxjs';\r\nimport { ResponseOptions } from '../base_response_options';\r\nimport { ReadyState } from '../enums';\r\nimport { Connection, ConnectionBackend, XSRFStrategy } from '../interfaces';\r\nimport { Request } from '../static_request';\r\nimport { Response } from '../static_response';\r\nimport { BrowserXhr } from './browser_xhr';\r\n/**\r\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\r\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\r\n * request.\r\n *\r\n * This class would typically not be created or interacted with directly inside applications, though\r\n * the {@link MockConnection} may be interacted with in tests.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nexport declare class XHRConnection implements Connection {\r\n    request: Request;\r\n    /**\r\n     * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\r\n     * `XMLHttpRequest`.\r\n     */\r\n    response: Observable<Response>;\r\n    readyState: ReadyState;\r\n    constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions);\r\n    setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */): void;\r\n}\r\n/**\r\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\r\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\r\n * for more information on XSRF.\r\n *\r\n * Applications can configure custom cookie and header names by binding an instance of this class\r\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\r\n * details.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nexport declare class CookieXSRFStrategy implements XSRFStrategy {\r\n    private _cookieName;\r\n    private _headerName;\r\n    constructor(_cookieName?: string, _headerName?: string);\r\n    configureRequest(req: Request): void;\r\n}\r\n/**\r\n * Creates {@link XHRConnection} instances.\r\n *\r\n * This class would typically not be used by end users, but could be\r\n * overridden if a different backend implementation should be used,\r\n * such as in a node backend.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\r\n * @Component({\r\n *   viewProviders: [\r\n *     HTTP_PROVIDERS,\r\n *     {provide: Http, useFactory: (backend, options) => {\r\n *       return new Http(backend, options);\r\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\r\n * })\r\n * class MyComponent {\r\n *   constructor(http:Http) {\r\n *     http.request('people.json').subscribe(res => this.people = res.json());\r\n *   }\r\n * }\r\n * ```\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nexport declare class XHRBackend implements ConnectionBackend {\r\n    private _browserXHR;\r\n    private _baseResponseOptions;\r\n    private _xsrfStrategy;\r\n    constructor(_browserXHR: BrowserXhr, _baseResponseOptions: ResponseOptions, _xsrfStrategy: XSRFStrategy);\r\n    createConnection(request: Request): XHRConnection;\r\n}\r\n"]}