{"version":3,"file":"http.d.ts","sources":["http.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Observable } from 'rxjs';\r\nimport { RequestOptions } from './base_request_options';\r\nimport { ConnectionBackend, RequestOptionsArgs } from './interfaces';\r\nimport { Request } from './static_request';\r\nimport { Response } from './static_response';\r\n/**\r\n * Performs http requests using `XMLHttpRequest` as the default backend.\r\n *\r\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\r\n * `request` returns an `Observable` which will emit a single {@link Response} when a\r\n * response is received.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\r\n * import {map} from 'rxjs/operators';\r\n *\r\n * @Component({\r\n *   selector: 'http-app',\r\n *   viewProviders: [HTTP_PROVIDERS],\r\n *   templateUrl: 'people.html'\r\n * })\r\n * class PeopleComponent {\r\n *   constructor(http: Http) {\r\n *     http.get('people.json')\r\n *       // Call map on the response observable to get the parsed people object\r\n *       .pipe(map(res => res.json()))\r\n *       // Subscribe to the observable to get the parsed people object and attach it to the\r\n *       // component\r\n *       .subscribe(people => this.people = people);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\r\n * ```\r\n *\r\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\r\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\r\n * the {@link XHRBackend} provider, as in the following example:\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {BaseRequestOptions, Http} from '@angular/http';\r\n * import {MockBackend} from '@angular/http/testing';\r\n * var injector = Injector.resolveAndCreate([\r\n *   BaseRequestOptions,\r\n *   MockBackend,\r\n *   {provide: Http, useFactory:\r\n *       function(backend, defaultOptions) {\r\n *         return new Http(backend, defaultOptions);\r\n *       },\r\n *       deps: [MockBackend, BaseRequestOptions]}\r\n * ]);\r\n * var http = injector.get(Http);\r\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nexport declare class Http {\r\n    protected _backend: ConnectionBackend;\r\n    protected _defaultOptions: RequestOptions;\r\n    constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions);\r\n    /**\r\n     * Performs any type of http request. First argument is required, and can either be a url or\r\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\r\n     * object can be provided as the 2nd argument. The options object will be merged with the values\r\n     * of {@link BaseRequestOptions} before performing the request.\r\n     */\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `get` http method.\r\n     */\r\n    get(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `post` http method.\r\n     */\r\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `put` http method.\r\n     */\r\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `delete` http method.\r\n     */\r\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `patch` http method.\r\n     */\r\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `head` http method.\r\n     */\r\n    head(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `options` http method.\r\n     */\r\n    options(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n}\r\n/**\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nexport declare class Jsonp extends Http {\r\n    constructor(backend: ConnectionBackend, defaultOptions: RequestOptions);\r\n    /**\r\n     * Performs any type of http request. First argument is required, and can either be a url or\r\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\r\n     * object can be provided as the 2nd argument. The options object will be merged with the values\r\n     * of {@link BaseRequestOptions} before performing the request.\r\n     *\r\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\r\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\r\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\r\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\r\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\r\n     * future security issues (e.g. content sniffing).  For more detail, see the\r\n     * [Security Guide](http://g.co/ng/security).\r\n     */\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response>;\r\n}\r\n"]}