{"version":3,"file":"http.js","sources":["../src/backends/browser_xhr.ts","../src/enums.ts","../src/headers.ts","../src/base_response_options.ts","../src/interfaces.ts","../src/http_utils.ts","../src/url_search_params.ts","../src/body.ts","../src/static_response.ts","../src/backends/browser_jsonp.ts","../src/backends/jsonp_backend.ts","../src/backends/xhr_backend.ts","../src/base_request_options.ts","../src/static_request.ts","../src/http.ts","../src/http_module.ts","../src/version.ts","../http.ts"],"names":["getDOM","ArrayBuffer","Blob"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class BrowserXhr {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Supported http methods.\n * @deprecated see https://angular.io/guide/http\n */\nexport enum RequestMethod {\n  Get,\n  Post,\n  Put,\n  Delete,\n  Options,\n  Head,\n  Patch\n}\n\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated see https://angular.io/guide/http\n */\nexport enum ReadyState {\n  Unsent,\n  Open,\n  HeadersReceived,\n  Loading,\n  Done,\n  Cancelled\n}\n\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated see https://angular.io/guide/http\n */\nexport enum ResponseType {\n  Basic,\n  Cors,\n  Default,\n  Error,\n  Opaque\n}\n\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated see https://angular.io/guide/http\n */\nexport enum ContentType {\n  NONE,\n  JSON,\n  FORM,\n  FORM_DATA,\n  TEXT,\n  BLOB,\n  ARRAY_BUFFER\n}\n\n/**\n * Define which buffer to use to store the response\n * @deprecated see https://angular.io/guide/http\n */\nexport enum ResponseContentType {\n  Text,\n  Json,\n  ArrayBuffer,\n  Blob\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class Headers {\n  /** @internal header names are lower case */\n  _headers: Map<string, string[]> = new Map();\n  /** @internal map lower case names to actual names */\n  _normalizedNames: Map<string, string> = new Map();\n\n  // TODO(vicb): any -> string|string[]\n  constructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  static fromResponseHeaderString(headersString: string): Headers {\n    const headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const index = line.indexOf(':');\n      if (index > 0) {\n        const name = line.slice(0, index);\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  append(name: string, value: string): void {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n\n  /**\n   * Deletes all header values for the given name.\n   */\n  delete (name: string): void {\n    const lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n\n  forEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string|null {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] { return Array.from(this._normalizedNames.values()); }\n\n  /**\n   * Sets or overrides header value for given name.\n   */\n  set(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n\n  /**\n   * Returns values of all headers.\n   */\n  values(): string[][] { return Array.from(this._headers.values()); }\n\n  /**\n   * Returns string of all headers.\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  toJSON(): {[name: string]: any} {\n    const serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name) !] = split;\n    });\n\n    return serialized;\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n\n  /**\n   * This method is not implemented.\n   */\n  entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n\n  private mayBeSetNormalizedName(name: string): void {\n    const lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob|null;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number|null;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers|null;\n  /**\n   * @internal\n   */\n  statusText: string|null;\n  /**\n   * @internal\n   */\n  type: ResponseType|null;\n  url: string|null;\n  constructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   */\n  merge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport abstract class ConnectionBackend { abstract createConnection(request: any): Connection; }\n\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport abstract class Connection {\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  // TODO(issue/24571): remove '!'.\n  request !: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport abstract class XSRFStrategy { abstract configureRequest(req: Request): void; }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const view = new Uint8Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n **/\nexport class QueryEncoder {\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  encodeValue(value: string): string { return standardEncoding(value); }\n}\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n  constructor(\n      public rawParams: string = '', private queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n\n  clone(): URLSearchParams {\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n\n  has(param: string): boolean { return this.paramsMap.has(param); }\n\n  get(param: string): string|null {\n    const storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n\n  getAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n\n  set(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  setAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  append(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  appendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  replaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  toString(): string {\n    const paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n\n  delete (param: string): void { this.paramsMap.delete(param); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nexport abstract class Body {\n  /**\n   * @internal\n   */\n  protected _body: any;\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse(<string>this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   */\n  text(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(this._body as ArrayBuffer));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(this._body as ArrayBuffer));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return <ArrayBuffer>this._body;\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  blob(): Blob {\n    if (this._body instanceof Blob) {\n      return <Blob>this._body;\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string|null;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  // TODO(issue/24571): remove '!'.\n  bytesLoaded !: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  // TODO(issue/24571): remove '!'.\n  totalBytes !: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers|null;\n\n  constructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n\n  toString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nlet _nextRequestId = 0;\nexport const JSONP_HOME = '__ng_jsonp__';\nlet _jsonpConnections: {[key: string]: any}|null = null;\n\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\n\n// Make sure not to evaluate this in a non-browser environment!\n@Injectable()\nexport class BrowserJsonp {\n  // Construct a <script> element with the specified URL\n  build(url: string): any {\n    const node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n\n  nextRequestID(): string { return `__req${_nextRequestId++}`; }\n\n  requestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n\n  exposeConnection(id: string, connection: any) {\n    const connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n\n  removeConnection(id: string) {\n    const connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n\n  // Attach the <script> element to the DOM\n  send(node: any) { document.body.appendChild(<Node>(node)); }\n\n  // Remove <script> element from the DOM\n  cleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(<Node>(node));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class JSONPConnection implements Connection {\n  // TODO(issue/24571): remove '!'.\n  private _id !: string;\n  // TODO(issue/24571): remove '!'.\n  private _script !: Element;\n  private _responseData: any;\n  private _finished: boolean = false;\n\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n\n  /** @internal */\n  constructor(\n      req: Request, private _dom: BrowserJsonp, private baseResponseOptions?: ResponseOptions) {\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   */\n  finished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class JSONPBackend extends ConnectionBackend {\n  /** @internal */\n  constructor(private _browserJSONP: BrowserJsonp, private _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n\n  createConnection(request: Request): JSONPConnection {\n    return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable, Observer} from 'rxjs';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n\n  setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n  constructor(\n      private _cookieName: string = 'XSRF-TOKEN', private _headerName: string = 'X-XSRF-TOKEN') {}\n\n  configureRequest(req: Request): void {\n    const xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class XHRBackend implements ConnectionBackend {\n  constructor(\n      private _browserXHR: BrowserXhr, private _baseResponseOptions: ResponseOptions,\n      private _xsrfStrategy: XSRFStrategy) {}\n\n  createConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string|null;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers|null;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string|null;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  get search(): URLSearchParams { return this.params; }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  set search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n\n  // TODO(Dzmitry): remove search when this.search is removed\n  constructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  merge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n\n  private _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n\n  private _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n\n  private _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class BaseRequestOptions extends RequestOptions {\n  constructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\n  /** Type of the request body **/\n  private contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n  constructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n\n  /**\n   * Returns the content type enum based on header options.\n   */\n  detectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  detectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  getBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst noop = function() {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = (w as any /** TODO #9100 */)['FormData'] || noop;\nconst Blob = (w as any /** TODO #9100 */)['Blob'] || noop;\nexport const ArrayBuffer: ArrayBufferConstructor =\n    (w as any /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs;\n  }\n\n  return newOptions.merge(new RequestOptions({method, url})) as RequestArgs;\n}\n\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class Http {\n  constructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n}\n\n\n/**\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class Jsonp extends Http {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n\n\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n\n\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n})\nexport class HttpModule {\n}\n\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/guide/http\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    JSONPBackend,\n  ],\n})\nexport class JsonpModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @deprecated see https://angular.io/guide/http\n */\nexport const VERSION = new Version('6.1.9');\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BrowserJsonp as Éµangular_packages_http_http_e} from './src/backends/browser_jsonp';\nexport {Body as Éµangular_packages_http_http_f} from './src/body';\nexport {_createDefaultCookieXSRFStrategy as Éµangular_packages_http_http_a,httpFactory as Éµangular_packages_http_http_b,jsonpFactory as Éµangular_packages_http_http_c} from './src/http_module';\nexport {RequestArgs as Éµangular_packages_http_http_d} from './src/interfaces';"]}